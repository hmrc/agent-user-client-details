# Copyright 2022 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = agent-user-client-details

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.audit.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"

# Default http client
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# Json error handler
play.http.errorHandler = "uk.gov.hmrc.play.bootstrap.backend.http.JsonErrorHandler"

# Play Modules
# ~~~~
# Additional play modules can be added here

play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"
# Provides implementations of various classes needed for the work item repo and throttled worker
play.modules.enabled += "uk.gov.hmrc.agentuserclientdetails.ClientNameModule"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
  # 300 is the default, you may need to change this according to your needs
  confidenceLevel = 300

  uk.gov.hmrc.agentuserclientdetails.controllers.MicroserviceHelloWorldController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
}

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true
}

# Microservice specific config

auditing {
  enabled = true
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

mongodb {
  uri = "mongodb://localhost:27017/agent-user-client-details"
}

microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = false
    }
  }

  services {
    auth {
      host = localhost
      port = 8500
    }
    citizen-details {
      host = localhost
      port = 9337
    }
    enrolment-store-proxy {
      host = localhost
      port = 7775
    }
    des {
      host = localhost
      port = 9904
      environment = test
      authorization-token = secret
    }
    if {
      host = localhost
      port = 9904
      environment = test
      authorization-token {
        API1712 = secret
        API1495 = secret
      }
    }
  }
}

agent.cache.size = 1000
agent.cache.expires = 1 hour
agent.cache.enabled = true

work-item-repository.inProgressRetryAfter.millis=20000

work-item-repository {
  available-before-seconds = 0
  failed-before-seconds = 30
}

throttling-rate {
  enable = true
  client-name-fetch = "1 / second"
  es19 = "1 / second"
}

job-scheduling {
  restart-repo-queue {
    initialDelaySeconds = 1
    intervalSeconds = 10
  }
  repo-cleanup {
    initialDelaySeconds = 10
    intervalSeconds = 300
  }
  log-repo-stats {
    initialDelaySeconds = 5
    intervalSeconds = 60
  }
}

# stubs-compatibility-mode: include session ID in calls to DES/IF and Enrolment Store.
# This is required when running against agents-external-stubs locally but can be disabled in higher environments.
stubs-compatibility-mode = true

agentsize {
  refreshduration = 7 days
}
